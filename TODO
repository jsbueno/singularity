DONE

1. field descriptor/data_classes
3. specialize data types
4. namespace acessor  for dotted attributes
5. JSON export
6. reactive fields

TODO

.Field value deleting
.Use of dataclasses as fields
.Field handling of default/mandatory values
.Field validators and options
.StringField Lenght parameters

. JSON import
. declarative data classes - for nested fields buildable in one line
. mapping-like access for dotted attributes
. postgresql JSONB persistence and indexing
. Schema JSON import/export
. workflow

. Python code generation from Schema.
. Django-model dynamic generation
. SQLAlchemy-model dynamic genreation
. Colander/DjangoForms dynamic generation
. automatic model change and versioning tracking (integrated with git)
. Captain'Proto interoperation




Implementation Details Todo:

.inter-references on the data mechanisms should use weakrefs
. Refactor to distinct files
. publish on pypi
. copy and deepcopy should work

