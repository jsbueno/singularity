DONE

Done:

1. field descriptor/data_classes
3. specialize data types
4. namespace acessor  for dotted attributes
5. JSON export
6. reactive fields
7. JSON import
8.Field value deleting
9. copy, deepcopy and pickling work
10. Use of dataclasses as fields
11. .nested field access as mapping keys
12. refactor main file
13. mapping-like access for dotted attributes
14. enable field-class-autoreference (and therefore graph database possibilities)

TODO

. Create EdgeField with Edgeproperties more proper for graphs.
.Field handling of default/mandatory values
.Field validators and options
.StringField Lenght parameters
. postgresql jsonb persistence (using SQLAlchemy for connections)
. declarative data classes - for nested fields buildable in one line
. postgresql JSONB persistence and indexing
. Schema JSON import/export
. workflow-states
. workflow-permissions
. workflow history tracking
. data history and versioning for items


. Python code generation from Schema.
. Django-model dynamic generation
. SQLAlchemy-model dynamic generation
. Colander/DjangoForms dynamic generation
. automatic model change and versioning tracking (integrated with git)
. Captain'Proto interoperation




Implementation Details TODO:

.inter-references on the data mechanisms should use weakrefs
. Refactor to distinct files
. publish on pypi

